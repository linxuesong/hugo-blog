<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on 网站标题</title>
    <link>/tags/java/</link>
    <description>Recent content in JAVA on 网站标题</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Wed, 14 Apr 2021 17:16:25 +0000</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JAVA异常机制</title>
      <link>/posts/java%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 14 Apr 2021 17:16:25 +0000</pubDate>
      
      <guid>/posts/java%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</guid>
      <description>一、异常 异常有两种选择：throws和catch，一种是抛给调用者，另一种是在本方法中捕获处理。
选择标准：如果知道如何处理就catch，不知道如何处理就throws
异常种类：Throwable是父类， 1⃣️Error子类是系统错误不可控，所以不用抛出、不用处理2⃣️Exception/RuntimeException是可控的要被控制,我们的代码不应有数组越界等错误 3⃣️Exception/IOException是文件读写错误，类加载错误1⃣️2⃣️是不需要throws和catech的，3⃣️是需要throws或catch的,并且如果throws要列出所有可能抛出的IOException
public static void func1() throws IOException {//列出所有可能抛出的的IOExceptiontry{//检测代码}catch(FileNotFoundException | UnKonwHostException) {// 处理捕获异常throw new ServeletException(&amp;quot;xx&amp;quot;); //也可以再次抛出异常}finally {//最后一定执行的代码，常做一些关闭文件，释放资源的事情， 对于close也可能爆出异常，对此可以用带资源的try语句，保证最后关闭资源}}二、日志 将提示信息按照不同级别打印到指定文件中
1.JDK的Logging import java.io.UnsupportedEncodingException;import java.util.logging.Logger;public class Main {public static void main(String[] args) Logger logger = Logger.</description>
    </item>
    
    <item>
      <title>Java中祖先类Object提供的基础方法</title>
      <link>/posts/java%E4%B8%AD%E7%A5%96%E5%85%88%E7%B1%BBobject%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 09 Apr 2021 15:28:30 +0000</pubDate>
      
      <guid>/posts/java%E4%B8%AD%E7%A5%96%E5%85%88%E7%B1%BBobject%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/</guid>
      <description>   函数声明 Object中作用 子类重写作用     boolean equals (Object other) 两个对象的引用是否相等，而非其实例域 比较子类的两个对象其内容是否相等   String hashCode() 由对象导出的散列码    String toString () 返回对象类名和散列码 方便打印对象变量的实际内容，在JAVA语句中+x或x可以自动转为x.toString()   Class getClass () 返回包含对象信息的类对象    String getName() 获取类名字     </description>
    </item>
    
    <item>
      <title>Java重写完美的equals方法</title>
      <link>/posts/java%E9%87%8D%E5%86%99%E5%AE%8C%E7%BE%8E%E7%9A%84equals%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 09 Apr 2021 15:08:57 +0000</pubDate>
      
      <guid>/posts/java%E9%87%8D%E5%86%99%E5%AE%8C%E7%BE%8E%E7%9A%84equals%E6%96%B9%E6%B3%95/</guid>
      <description>示例代码：
 @Overridepublic boolean equals(Object otherObject) {// 1.判断是否引用自身，小优化可以提前避免后面的实例比较if(this == otherObject) {return true;}// 2.比较this和otherObject是否为同一个类,此处有两种选择：// a. this.getClass()==otherObject.getClass(),各个子类中的语义不一致// b. otherObject instanceof ClassName,各个子类中的语义一致if (this.getClass() != otherObject.getClass()) {return false;}// 如果步骤2中按b分支，既比较双方可以转为通用父类，则多下面一步转换// 按照a分支则无需此步骤// ClassName other = (ClassName) otherObject;Father other = (Father) otherObject;// 3.</description>
    </item>
    
    <item>
      <title>JAVA中数组的常见操作</title>
      <link>/posts/java%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 08 Apr 2021 16:34:03 +0000</pubDate>
      
      <guid>/posts/java%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</guid>
      <description>一、普通数组int[] 深拷贝 类似C++中的数组指针，使用等号赋值只是浅拷贝，深拷贝需要用Arrays类的如下方法
Static type copyOf(type a[], int length) // 深拷贝出一个新的数组Static type copyOfRange(type a[], int start, int end)排序 int[] a = new int[1000];Arrays.sort(a); // 使用优化后的快速排序方法对数组进行排序判断是否相等 直接用等号判断是判断引用是否为同一处，如果要判断具体值要用Arrays类的如下方法
static boolean equals(type[] a, type[] b)二、泛型数组列表ArrayList&amp;lt;type&amp;gt; 使用 // 构建 ArrayList&amp;lt;Empolyee&amp;gt; staff = new ArrayList&amp;lt;Employee&amp;gt;(); // 声明并构造 // 增删改查 staff.add(new Emplyee(&amp;#34;xxx&amp;#34;)); // 尾部添加元素,也可以指定位置 Employee e = staff.</description>
    </item>
    
    <item>
      <title>JAVA String和StringBuilder常用方法</title>
      <link>/posts/java-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 08 Apr 2021 16:02:34 +0000</pubDate>
      
      <guid>/posts/java-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>一、String不可变字符串 1.int compareTo(String other) 比较两字符串大小 2.boolean equals(Object object)比较两字符串是否其内容一致 ==比较运算符比较的是引用位置是否相等，而非其内容
3.boolean endsWith(String suffix)和Boolean startsWith(String prefix)以指定字符串开始或结尾返回true 4.int indexOf(String str)返回与指定字符串匹配的首个位置 如果还要其他要求，是有函数重载的
5.int length()字符串长度 6.String toLowerCase()和String toUpperCase()大小写转换 7.String trim()删除原始字符串头部和尾部的空格 更多方法可以参考Java的官网api文档
二、StringBuilder string问题是每次做字符串拼接都会产生一个新的String对象，这样既耗时又费空间
使用StringBuilder则可以避免这个问题发生
1.String toString()转为字符串 2.StringBuilder insert(int offset， String str) 指定位置插入自负传 3.void setCharAt(int i， char c)设置指定位置字符 4.StringBuilder append（String str）追加字符串在尾部 </description>
    </item>
    
  </channel>
</rss>
