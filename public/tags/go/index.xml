<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 网站标题</title>
    <link>/tags/go/</link>
    <description>Recent content in Go on 网站标题</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Thu, 03 Jun 2021 19:53:54 +0000</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>protobuf学习整理</title>
      <link>/posts/protobuf%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 03 Jun 2021 19:53:54 +0000</pubDate>
      
      <guid>/posts/protobuf%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</guid>
      <description>一、ProtoBuf简介 语言平台无关的、灵活、高效、自动化的序列化机制
类似协议：XML、JSON
区别点：XML、JSON关注人类可读性，通常用于双方交互的协议；ProtoBuf更关注压缩效率、传输速度，人类可读性差(指序列化之后的文件)二、如何用？ 2.1golang语言 2.1.0环境准备 需要如下两个工具
1.protoc:可以执行不同语言的api，生成不同语言版本的结构体文件
2.protoc-gen-go:go版本的生成程序可以生成go语言的结构体
以上工具不同版本生成的文件是不一样的，所以安需要下载指定版本
安装最新版本
1.安装最新的protoc-gen-go, 在gopath路径下执行如下命令go get github.com/golang/protobuf/protoc-gen-go // protoc-gen-go会安到$gopath/bin下,如果自己下载编译，也要放到这个路径下2.安装最新的protobufhttps://github.com/protocolbuffers/protobuf/releases //下载后解压，可以做其他的部分 安装之前的版本
1.安装之前版本的protoc-gen-go, 在gopath路径下执行如下命令GIT_TAG=&amp;quot;v1.2.0&amp;quot;go get -d -u github.com/golang/protobuf/protoc-gen-gogit -C &amp;quot;$(go env GOPATH)&amp;quot;/src/github.com/golang/protobufcheckout $GIT_TAGgo install github.com/golang/protobuf/protoc-gen-go2.安装之前版本的protobufhttps://github.com/protocolbuffers/protobuf/releases2.2.1准备原协议.proto文件 message xxx {// 字段规则：required -&amp;gt; 字段只能也必须出现 1 次// 字段规则：optional -&amp;gt; 字段可出现 0 次或1次// 字段规则：repeated -&amp;gt; 字段可出现任意多次（包括 0）// 类型：int32、int64、sint32、sint64、string、32-bit .</description>
    </item>
    
    <item>
      <title>golang包管理工具介绍</title>
      <link>/posts/golang%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 31 Mar 2021 19:34:09 +0000</pubDate>
      
      <guid>/posts/golang%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</guid>
      <description>参考博客
Go管理工具的使用
0.没有包管理工具的情况 0.1寻找依赖的路径： 1⃣️在GOROOT目录下查找
2⃣️在GOPATH/src下面查找包
0.2获取依赖 go get 依赖地址 // 依赖包会存放到gopath下面两个位置，pkg里面.a文件和src下面的.go文件1.govendor 1.1管理方式 寻找依赖的路径：
1⃣️在$GOPATH/src/当前包文件/vendor目录
2⃣️向当前包目录的上级目录查找知道找到src下的vendor
3⃣️在GOROOT目录下查找
4⃣️在GOPATH下面查找包
1.2安装 go get -u github.com/kardianos/govendor安装完成后为方便使用加入到环境变量
export PATH=&amp;quot;$GOPATH/bin:$PATH&amp;quot;1.3使用 0⃣️如果不是从git上拉取已有vendor.json的项目，而是本地新建项目，则要初始化本地项目
初始化项目目录，生成vendor目录和vendor.json文件
govendor init1⃣️下载项目依赖，这里以引入
依赖为例
从远程拉去下来依赖并放入当前vendor文件夹，记录到vendor.json,在gopath下不会有依赖包
govendor fetch &amp;quot;包链接&amp;quot;// 举例：govendor fetch &amp;quot;github.com/labstack/echo/...&amp;quot; //这里三个点表示文件夹下的所有文件，或者echo后面不要有斜杠，标识拉取项目🐻踩坑：i.对于无法从网上下载下里的包，只能从git上自己手动下载，放到vendor下面 ii.有时需要加上三个点标识所有文件，不然会下载下一个空文件夹
2⃣️提交到git上只需要提交vendor.json即可,不需要把所有的vendor依赖文件夹提交上去
从git上拉起他人项目，项目中含有vendor.json文件，通过如下命令安装依赖包
govendor sync1.4其他 常用命令</description>
    </item>
    
  </channel>
</rss>
