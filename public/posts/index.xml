<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 网站标题</title>
    <link>/posts/</link>
    <description>Recent content in Posts on 网站标题</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Thu, 11 Nov 2021 19:38:04 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hexo-butterfly-tag-plugins-plus插件样式测试文章</title>
      <link>/posts/hexo-butterfly-tag-plugins-plus%E6%8F%92%E4%BB%B6%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</link>
      <pubDate>Thu, 11 Nov 2021 19:38:04 +0000</pubDate>
      
      <guid>/posts/hexo-butterfly-tag-plugins-plus%E6%8F%92%E4%BB%B6%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</guid>
      <description>参考文章https://akilar.top/posts/615e2dec/ #行内文本text {% u 文本内容 %} {% emp 文本内容 %} {% wavy 文本内容 %} {% del 文本内容 %} {% kbd 文本内容 %} {% psw 文本内容 %}
#行内文本span
 彩色文字 在一段话中方便插入各种颜色的标签，包括：{% span red, 红色 %}、{% span yellow, 黄色 %}、{% span green, 绿色 %}、{% span cyan, 青色 %}、{% span blue, 蓝色 %}、{% span gray, 灰色 %}。 超大号文字 文档「开始」页面中的标题部分就是超大号文字。 {% span center logo large, Volantis %} {% span center small, A Wonderful Theme for Hexo %} #段落文本p 彩色文字 在一段话中方便插入各种颜色的标签，包括：{% p red, 红色 %}、{% p yellow, 黄色 %}、{% p green, 绿色 %}、{% p cyan, 青色 %}、{% p blue, 蓝色 %}、{% p gray, 灰色 %}。 超大号文字 文档「开始」页面中的标题部分就是超大号文字。 {% p center logo large, Volantis %} {% p center small, A Wonderful Theme for Hexo %} #提示块 #动态标签  {% tip warning faa-horizontal animated %}warning{% endtip %} {% tip ban faa-flash animated %}ban{% endtip %}</description>
    </item>
    
    <item>
      <title>gson的常规使用</title>
      <link>/posts/gson%E7%9A%84%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 03 Sep 2021 00:17:28 +0000</pubDate>
      
      <guid>/posts/gson%E7%9A%84%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>golang 字符串常见处理</title>
      <link>/posts/golang-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 23 Jul 2021 11:20:04 +0000</pubDate>
      
      <guid>/posts/golang-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E5%A4%84%E7%90%86/</guid>
      <description>一、截取子串
</description>
    </item>
    
    <item>
      <title>文章样式测试</title>
      <link>/posts/%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 12 Jul 2021 15:02:36 +0000</pubDate>
      
      <guid>/posts/%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/</guid>
      <description>[toc]
基本快捷键 1、通用操作 Command是Mac里最重要的修饰键，在大多数情况下相当于Windows下的Ctrl。所以以下最基本操作很好理解：
Command-Z 撤销　Command-X 剪切　Command-C 拷贝（Copy）　Command-V 粘贴　Command-A 全选（All）　Command-S 保存（Save)　Command-F 查找（Find）
2.截图 Command-Shift-4 截取所选屏幕区域到一个文件　Command-Shift-3 截取全部屏幕到文件　Command-Shift-Control-3 截取全部屏幕到剪贴板　Command-Shift-4 截取所选屏幕区域到一个文件，或追加按空格键仅捕捉一个窗口　Command-Shift-Control-4 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗
3、在应用程序中： Command-Option-esc 打开强制退出窗口　Command-H 隐藏（Hide）当前正在运行的应用程序窗口　Command-Option-H 隐藏（Hide）其他应用程序窗口　Command-Q 退出（Quit）最前面的应用程序　Command-Shift-Z 重做，也就是撤销的逆向操作　Command-Tab 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于Windows中（Alt+Tab）　Command-Option-esc 打开“强制退出”窗口，如果有应用程序无响应，可在窗口列表中选择强制退出
4、文本处理： Command-右箭头 将光标移至当前行的行尾　Command-B 切换所选文字粗体（Bold）显示　fn-Delete 相当于PC全尺寸键盘上的Delete，也就是向后删除　fn-上箭头 向上滚动一页（Page Up）　fn-下箭头 向下滚动一页（Page Down）　fn-左箭头 滚动至文稿开头（Home）　fn-右箭头 滚动至文稿末尾（End）　Command-右箭头 将光标移至当前行的行尾　Command-左箭头 将光标移至当前行的行首　Command-下箭头 将光标移至文稿末尾　Command-上箭头 将光标移至文稿开头　Option-右箭头 将光标移至下一个单词的末尾　Option-左箭头 将光标移至上一个单词的开头　Control-A 移至行或段落的开头</description>
    </item>
    
    <item>
      <title>hexo博客推广计划，如何让更多人知道</title>
      <link>/posts/hexo%E5%8D%9A%E5%AE%A2%E6%8E%A8%E5%B9%BF%E8%AE%A1%E5%88%92%E5%A6%82%E4%BD%95%E8%AE%A9%E6%9B%B4%E5%A4%9A%E4%BA%BA%E7%9F%A5%E9%81%93/</link>
      <pubDate>Tue, 06 Jul 2021 21:08:12 +0000</pubDate>
      
      <guid>/posts/hexo%E5%8D%9A%E5%AE%A2%E6%8E%A8%E5%B9%BF%E8%AE%A1%E5%88%92%E5%A6%82%E4%BD%95%E8%AE%A9%E6%9B%B4%E5%A4%9A%E4%BA%BA%E7%9F%A5%E9%81%93/</guid>
      <description>搜索如何将自己的站点加入到百度、谷歌等搜索引擎，让更多的人发现你</description>
    </item>
    
    <item>
      <title>Go性能分析工具</title>
      <link>/posts/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 17 Jun 2021 20:42:37 +0000</pubDate>
      
      <guid>/posts/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</guid>
      <description>一、GODEBUG参数 特别方便，无需下载第三方工具，无需修改程序 代码
分析协程调度情况
https://segmentfault.com/a/1190000020108079
二、Trace 特点 无需下载第三方工具，需要修改程序代码
https://segmentfault.com/a/1190000019736288
如何用 修改代码,加入trace
import (&amp;quot;os&amp;quot;&amp;quot;runtime/trace&amp;quot;)func main() {trace.Start(os.Stderr)defer trace.Stop() //一定要这一行执行后才会有trace文件ch := make(chan string)go func() {ch &amp;lt;- &amp;quot;EDDYCJY&amp;quot;}()&amp;lt;-ch}生成跟踪文件：
$ go run main.go 2&amp;gt; trace.out // 运行生成追踪文件 分析追踪文件
$ go tool trace trace.</description>
    </item>
    
    <item>
      <title>主题优化增加网页百度统计功能</title>
      <link>/posts/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E5%A2%9E%E5%8A%A0%E7%BD%91%E9%A1%B5%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 04 Jun 2021 19:56:09 +0000</pubDate>
      
      <guid>/posts/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E5%A2%9E%E5%8A%A0%E7%BD%91%E9%A1%B5%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</guid>
      <description>1.开通百度统计账号
2.获取跟踪代码
3.将跟踪代码放到head末尾位置 本主题的head路径为themes/Sakura/layout/_partial/head.ejs
TODO: 继续优化将其变成一个站点配置功能，使用指定的百度提供代码中的key作为区分不同的统计
# Baidu Analytics IDbaidu_analytics: 上面步骤中记录的百度统计里用户的key值。4.效果截图
参考代码http://www.jcsama.com/2016/01/25/hexo-baido-analytics/</description>
    </item>
    
    <item>
      <title>protobuf学习整理</title>
      <link>/posts/protobuf%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 03 Jun 2021 19:53:54 +0000</pubDate>
      
      <guid>/posts/protobuf%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</guid>
      <description>一、ProtoBuf简介 语言平台无关的、灵活、高效、自动化的序列化机制
类似协议：XML、JSON
区别点：XML、JSON关注人类可读性，通常用于双方交互的协议；ProtoBuf更关注压缩效率、传输速度，人类可读性差(指序列化之后的文件)二、如何用？ 2.1golang语言 2.1.0环境准备 需要如下两个工具
1.protoc:可以执行不同语言的api，生成不同语言版本的结构体文件
2.protoc-gen-go:go版本的生成程序可以生成go语言的结构体
以上工具不同版本生成的文件是不一样的，所以安需要下载指定版本
安装最新版本
1.安装最新的protoc-gen-go, 在gopath路径下执行如下命令go get github.com/golang/protobuf/protoc-gen-go // protoc-gen-go会安到$gopath/bin下,如果自己下载编译，也要放到这个路径下2.安装最新的protobufhttps://github.com/protocolbuffers/protobuf/releases //下载后解压，可以做其他的部分 安装之前的版本
1.安装之前版本的protoc-gen-go, 在gopath路径下执行如下命令GIT_TAG=&amp;quot;v1.2.0&amp;quot;go get -d -u github.com/golang/protobuf/protoc-gen-gogit -C &amp;quot;$(go env GOPATH)&amp;quot;/src/github.com/golang/protobufcheckout $GIT_TAGgo install github.com/golang/protobuf/protoc-gen-go2.安装之前版本的protobufhttps://github.com/protocolbuffers/protobuf/releases2.2.1准备原协议.proto文件 message xxx {// 字段规则：required -&amp;gt; 字段只能也必须出现 1 次// 字段规则：optional -&amp;gt; 字段可出现 0 次或1次// 字段规则：repeated -&amp;gt; 字段可出现任意多次（包括 0）// 类型：int32、int64、sint32、sint64、string、32-bit .</description>
    </item>
    
    <item>
      <title>mac快捷键整理</title>
      <link>/posts/mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 25 May 2021 14:14:02 +0000</pubDate>
      
      <guid>/posts/mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</guid>
      <description>基本快捷键 1、通用操作 Command是Mac里最重要的修饰键，在大多数情况下相当于Windows下的Ctrl。所以以下最基本操作很好理解：
Command-Z 撤销　Command-X 剪切　Command-C 拷贝（Copy）　Command-V 粘贴　Command-A 全选（All）　Command-S 保存（Save)　Command-F 查找（Find）
2.截图 Command-Shift-4 截取所选屏幕区域到一个文件　Command-Shift-3 截取全部屏幕到文件　Command-Shift-Control-3 截取全部屏幕到剪贴板　Command-Shift-4 截取所选屏幕区域到一个文件，或追加按空格键仅捕捉一个窗口　Command-Shift-Control-4 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗
3、在应用程序中： Command-Option-esc 打开强制退出窗口　Command-H 隐藏（Hide）当前正在运行的应用程序窗口　Command-Option-H 隐藏（Hide）其他应用程序窗口　Command-Q 退出（Quit）最前面的应用程序　Command-Shift-Z 重做，也就是撤销的逆向操作　Command-Tab 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于Windows中（Alt+Tab）　Command-Option-esc 打开“强制退出”窗口，如果有应用程序无响应，可在窗口列表中选择强制退出
4、文本处理： Command-右箭头 将光标移至当前行的行尾　Command-B 切换所选文字粗体（Bold）显示　fn-Delete 相当于PC全尺寸键盘上的Delete，也就是向后删除　fn-上箭头 向上滚动一页（Page Up）　fn-下箭头 向下滚动一页（Page Down）　fn-左箭头 滚动至文稿开头（Home）　fn-右箭头 滚动至文稿末尾（End）　Command-右箭头 将光标移至当前行的行尾　Command-左箭头 将光标移至当前行的行首　Command-下箭头 将光标移至文稿末尾　Command-上箭头 将光标移至文稿开头　Option-右箭头 将光标移至下一个单词的末尾　Option-左箭头 将光标移至上一个单词的开头　Control-A 移至行或段落的开头</description>
    </item>
    
    <item>
      <title>MarkDown快速查询转移字符</title>
      <link>/posts/markdown%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2%E8%BD%AC%E7%A7%BB%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Tue, 25 May 2021 14:13:33 +0000</pubDate>
      
      <guid>/posts/markdown%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2%E8%BD%AC%E7%A7%BB%E5%AD%97%E7%AC%A6/</guid>
      <description>MarkDown快速查询转移字符 公式块部分 举例
$$dp[i]=\begin{cases}计算式1 &amp;amp;计算式条件 \\换行计算式2 &amp;amp;计算式条件 \\换行\end{cases}$$详细表格
   公式块 \begin{cases} 内容 \end{cases} 大公式表达式      \big [ //比较大的左中括号    \bigg[ //再大一点    \Big[ //比big大一点    \Bigg[ //比bigg大一点    a_2 a下标2 a^3 a上标3 上标下标    \sum ：∑ \int ：∫ \oint ：∮ \prod：∏ 求和、求导    \alpha： α \beta： β \gamma：γ \Phi ： Φ \Omega：Ω \Delta： Δ \delta： δ 希腊字母    代码块部分 文本部分 表格部分 如果markdown语法对应的表格在hexo上无法显示可以直接插入html代码</description>
    </item>
    
    <item>
      <title>Linux常用命令整理</title>
      <link>/posts/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 25 May 2021 14:12:56 +0000</pubDate>
      
      <guid>/posts/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
      <description>Linux常用命令整理 一、文件操作 移动:mv
复制:cp
删除:rm
创建文件夹:mkdir -p参数是即使父目录不存在，递归创建出来文件夹
查找: find 路径 -name 文件名
二、进程管理 1.ps命令 ps - aux|(grep 命令名) 显示所有进程信息，连同命令行
显示结果说明:
主要参数:
   USER 用户账号     PID 当前进程ID   CPU 进程占用CPU   MEM 进程占用内存   VSZ 虚拟内存量Kbytes   RSS 物理内存量KBytes   TTY 于哪一终端运作,如果与终端机无关显示?</description>
    </item>
    
    <item>
      <title>个人博客的分类和标签</title>
      <link>/posts/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Tue, 25 May 2021 14:12:31 +0000</pubDate>
      
      <guid>/posts/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</guid>
      <description>分类和标签 只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。
categories:- Diarytags:- PS3- Games 分类方法的分歧
如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：
categories:- Diary- Life会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。
如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。
categories:- [Diary, PlayStation]- [Diary, Games]- [Life]此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类。</description>
    </item>
    
    <item>
      <title>Golang日志第三方库的使用</title>
      <link>/posts/golang%E6%97%A5%E5%BF%97%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 20 May 2021 10:44:05 +0000</pubDate>
      
      <guid>/posts/golang%E6%97%A5%E5%BF%97%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1.第三方日志库的对比 2.Zap 2.1简单实例-会把日志打印到控制台 //1.快速创建Zap.logger的方法，使用预先写好的配置创建日志变量//NewExample(Option...)//NewDevelopment(Option...)//NewProductionlogger, _ := zap.NewProduction() defer logger.Sync() // flushes buffer, if any//2.创建日志对象后可以打印日志了，有两种打印日志的方式//2.1效率低一点，但自由度更高sugar := logger.Sugar()sugar.Infow(&amp;quot;failed to fetch URL&amp;quot;,// Structured context as loosely typed key-value pairs.&amp;quot;url&amp;quot;, url,&amp;quot;attempt&amp;quot;, 3,&amp;quot;backoff&amp;quot;, time.Second,)sugar.Infof(&amp;quot;Failed to fetch URL: %s&amp;quot;, url)//2.2效率高一点，要指定类型defer logger.</description>
    </item>
    
    <item>
      <title>JAVA异常机制</title>
      <link>/posts/java%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 14 Apr 2021 17:16:25 +0000</pubDate>
      
      <guid>/posts/java%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</guid>
      <description>一、异常 异常有两种选择：throws和catch，一种是抛给调用者，另一种是在本方法中捕获处理。
选择标准：如果知道如何处理就catch，不知道如何处理就throws
异常种类：Throwable是父类， 1⃣️Error子类是系统错误不可控，所以不用抛出、不用处理2⃣️Exception/RuntimeException是可控的要被控制,我们的代码不应有数组越界等错误 3⃣️Exception/IOException是文件读写错误，类加载错误1⃣️2⃣️是不需要throws和catech的，3⃣️是需要throws或catch的,并且如果throws要列出所有可能抛出的IOException
public static void func1() throws IOException {//列出所有可能抛出的的IOExceptiontry{//检测代码}catch(FileNotFoundException | UnKonwHostException) {// 处理捕获异常throw new ServeletException(&amp;quot;xx&amp;quot;); //也可以再次抛出异常}finally {//最后一定执行的代码，常做一些关闭文件，释放资源的事情， 对于close也可能爆出异常，对此可以用带资源的try语句，保证最后关闭资源}}二、日志 将提示信息按照不同级别打印到指定文件中
1.JDK的Logging import java.io.UnsupportedEncodingException;import java.util.logging.Logger;public class Main {public static void main(String[] args) Logger logger = Logger.</description>
    </item>
    
    <item>
      <title>Java中祖先类Object提供的基础方法</title>
      <link>/posts/java%E4%B8%AD%E7%A5%96%E5%85%88%E7%B1%BBobject%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 09 Apr 2021 15:28:30 +0000</pubDate>
      
      <guid>/posts/java%E4%B8%AD%E7%A5%96%E5%85%88%E7%B1%BBobject%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/</guid>
      <description>   函数声明 Object中作用 子类重写作用     boolean equals (Object other) 两个对象的引用是否相等，而非其实例域 比较子类的两个对象其内容是否相等   String hashCode() 由对象导出的散列码    String toString () 返回对象类名和散列码 方便打印对象变量的实际内容，在JAVA语句中+x或x可以自动转为x.toString()   Class getClass () 返回包含对象信息的类对象    String getName() 获取类名字     </description>
    </item>
    
    <item>
      <title>Java重写完美的equals方法</title>
      <link>/posts/java%E9%87%8D%E5%86%99%E5%AE%8C%E7%BE%8E%E7%9A%84equals%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 09 Apr 2021 15:08:57 +0000</pubDate>
      
      <guid>/posts/java%E9%87%8D%E5%86%99%E5%AE%8C%E7%BE%8E%E7%9A%84equals%E6%96%B9%E6%B3%95/</guid>
      <description>示例代码：
 @Overridepublic boolean equals(Object otherObject) {// 1.判断是否引用自身，小优化可以提前避免后面的实例比较if(this == otherObject) {return true;}// 2.比较this和otherObject是否为同一个类,此处有两种选择：// a. this.getClass()==otherObject.getClass(),各个子类中的语义不一致// b. otherObject instanceof ClassName,各个子类中的语义一致if (this.getClass() != otherObject.getClass()) {return false;}// 如果步骤2中按b分支，既比较双方可以转为通用父类，则多下面一步转换// 按照a分支则无需此步骤// ClassName other = (ClassName) otherObject;Father other = (Father) otherObject;// 3.</description>
    </item>
    
    <item>
      <title>JAVA中数组的常见操作</title>
      <link>/posts/java%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 08 Apr 2021 16:34:03 +0000</pubDate>
      
      <guid>/posts/java%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</guid>
      <description>一、普通数组int[] 深拷贝 类似C++中的数组指针，使用等号赋值只是浅拷贝，深拷贝需要用Arrays类的如下方法
Static type copyOf(type a[], int length) // 深拷贝出一个新的数组Static type copyOfRange(type a[], int start, int end)排序 int[] a = new int[1000];Arrays.sort(a); // 使用优化后的快速排序方法对数组进行排序判断是否相等 直接用等号判断是判断引用是否为同一处，如果要判断具体值要用Arrays类的如下方法
static boolean equals(type[] a, type[] b)二、泛型数组列表ArrayList&amp;lt;type&amp;gt; 使用 // 构建 ArrayList&amp;lt;Empolyee&amp;gt; staff = new ArrayList&amp;lt;Employee&amp;gt;(); // 声明并构造 // 增删改查 staff.add(new Emplyee(&amp;#34;xxx&amp;#34;)); // 尾部添加元素,也可以指定位置 Employee e = staff.</description>
    </item>
    
    <item>
      <title>JAVA String和StringBuilder常用方法</title>
      <link>/posts/java-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 08 Apr 2021 16:02:34 +0000</pubDate>
      
      <guid>/posts/java-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>一、String不可变字符串 1.int compareTo(String other) 比较两字符串大小 2.boolean equals(Object object)比较两字符串是否其内容一致 ==比较运算符比较的是引用位置是否相等，而非其内容
3.boolean endsWith(String suffix)和Boolean startsWith(String prefix)以指定字符串开始或结尾返回true 4.int indexOf(String str)返回与指定字符串匹配的首个位置 如果还要其他要求，是有函数重载的
5.int length()字符串长度 6.String toLowerCase()和String toUpperCase()大小写转换 7.String trim()删除原始字符串头部和尾部的空格 更多方法可以参考Java的官网api文档
二、StringBuilder string问题是每次做字符串拼接都会产生一个新的String对象，这样既耗时又费空间
使用StringBuilder则可以避免这个问题发生
1.String toString()转为字符串 2.StringBuilder insert(int offset， String str) 指定位置插入自负传 3.void setCharAt(int i， char c)设置指定位置字符 4.StringBuilder append（String str）追加字符串在尾部 </description>
    </item>
    
    <item>
      <title>Redis常用命令整理</title>
      <link>/posts/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 01 Apr 2021 14:59:02 +0000</pubDate>
      
      <guid>/posts/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
      <description>0.前言及Redis的链接 redis缓存数据库，主要存放key-value键值对，其中key为字符串，value可为多种类型字符串、列表、集合、字典
1.设置字符串 set key valueget key value2.设置列表 lpsuh key childElement // 头部插入lpop key // 头部删除lrang key 0 10 // 从头部开始查询到10// 注：尾部操作则将lpush替换成rpush// 头部插入的下表说明，头部入A、B、C下标: 0、 1、 2元素: A、 B、 C下标: -3、 -2、 -13.设置集合 集合分为无序集合和有序集合(元素含权重)，集合元素个数为2的32次方-1个
无序集合
sadd key member // 添加元素smemebers key // 查询所有元素scard key // 获取集合中元素个数sdiff key1 key2 // 差集sinter key1 key2 // 集合的交集运算sunion key1 key2 // 集合的补集有序集合（元素含权重）</description>
    </item>
    
    <item>
      <title>golang包管理工具介绍</title>
      <link>/posts/golang%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 31 Mar 2021 19:34:09 +0000</pubDate>
      
      <guid>/posts/golang%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</guid>
      <description>参考博客
Go管理工具的使用
0.没有包管理工具的情况 0.1寻找依赖的路径： 1⃣️在GOROOT目录下查找
2⃣️在GOPATH/src下面查找包
0.2获取依赖 go get 依赖地址 // 依赖包会存放到gopath下面两个位置，pkg里面.a文件和src下面的.go文件1.govendor 1.1管理方式 寻找依赖的路径：
1⃣️在$GOPATH/src/当前包文件/vendor目录
2⃣️向当前包目录的上级目录查找知道找到src下的vendor
3⃣️在GOROOT目录下查找
4⃣️在GOPATH下面查找包
1.2安装 go get -u github.com/kardianos/govendor安装完成后为方便使用加入到环境变量
export PATH=&amp;quot;$GOPATH/bin:$PATH&amp;quot;1.3使用 0⃣️如果不是从git上拉取已有vendor.json的项目，而是本地新建项目，则要初始化本地项目
初始化项目目录，生成vendor目录和vendor.json文件
govendor init1⃣️下载项目依赖，这里以引入
依赖为例
从远程拉去下来依赖并放入当前vendor文件夹，记录到vendor.json,在gopath下不会有依赖包
govendor fetch &amp;quot;包链接&amp;quot;// 举例：govendor fetch &amp;quot;github.com/labstack/echo/...&amp;quot; //这里三个点表示文件夹下的所有文件，或者echo后面不要有斜杠，标识拉取项目🐻踩坑：i.对于无法从网上下载下里的包，只能从git上自己手动下载，放到vendor下面 ii.有时需要加上三个点标识所有文件，不然会下载下一个空文件夹
2⃣️提交到git上只需要提交vendor.json即可,不需要把所有的vendor依赖文件夹提交上去
从git上拉起他人项目，项目中含有vendor.json文件，通过如下命令安装依赖包
govendor sync1.4其他 常用命令</description>
    </item>
    
    <item>
      <title>mac自带终端美化不用iterm2</title>
      <link>/posts/mac%E9%85%8D%E7%BD%AEiterm2/</link>
      <pubDate>Sat, 20 Mar 2021 11:27:45 +0000</pubDate>
      
      <guid>/posts/mac%E9%85%8D%E7%BD%AEiterm2/</guid>
      <description>参考链接：
晨旭OvO原创文章https://blog.csdn.net/a1228136188/article/details/109092435
本文为CSDN博主「DuebassLei」https://blog.csdn.net/m0_37903882/article/details/112655290 https://blog.csdn.net/m0_37903882/article/details/112655290
前沿： mac终端的使用，这里只使用系统自带的终端+oh my zsh，无iterm2、hyper等
 使用iterm2的好处是配置界面丰富主题多，有支持lz、sz的方法 不使用iterm2的好处是省去一个软件，配置也不算是麻烦  最终效果如下 设置步骤如下
1.下载zsh、oh-my-zsh Zsh // a 安装yum install -y zsh// b 查看zsh --version// c shell由bash变为zshchsh -s /bin/zsh// d 验证 #重新查看目前默认的shell,已经变为bin/zshecho $SHELLOh-my-Zsh sh -c &amp;quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;2.配置zsh 修改配置文件 vi ～/.zshrc配置文件修改如下 # 1.</description>
    </item>
    
    <item>
      <title>mac迁移软件经历</title>
      <link>/posts/mac%E8%BF%81%E7%A7%BB%E8%BD%AF%E4%BB%B6%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Sat, 20 Mar 2021 11:10:25 +0000</pubDate>
      
      <guid>/posts/mac%E8%BF%81%E7%A7%BB%E8%BD%AF%E4%BB%B6%E7%BB%8F%E5%8E%86/</guid>
      <description>Mac工作软件安装踩坑记录
1.Idea 先下载idea，在idea里面下载jdk，这样避免配置jdk
1.1下载idea 1.2在idea内部安装jdk ![使用idea安装jdk](https://raw.githubusercontent.com/linxuesong/TyporaPictures/master/img/截屏2021-03-19 下午7.45.35.png)
1.3修改maven配置 主要解决：解决maven包拉取不下来
打开一个项目文件，在配置中将原来电脑的setting.xml做替换，更新maven即可
2.goland 2.1安装goland 2.2在goland中安装go环境 ![截屏2021-03-19 下午7.53.10](/Users/linxuesong/Desktop/截屏2021-03-19 下午7.53.10.png)
3.邮件 3.1关闭腾讯企业邮箱的安全登录 登录腾讯企业邮箱官网，设置-》账户，将账户安全修改如下：
3.2mac邮件添加邮箱账户 选填加其他邮箱账户
电子邮件和密码是公司提供的，确认后进入如下界面
这个配置的填写参考腾讯邮箱 设置-》客户端设置界面配置tls端口时要先关闭“自动管理链接设置”
参考博客：使用Mac自带邮箱添加腾讯企业邮箱 https://www.jianshu.com/p/2eb79645d94f</description>
    </item>
    
    <item>
      <title>ubuntu中apt-get安装的默认路径</title>
      <link>/posts/ubuntu%E4%B8%ADapt-get%E5%AE%89%E8%A3%85%E7%9A%84%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 01 Mar 2021 11:12:51 +0000</pubDate>
      
      <guid>/posts/ubuntu%E4%B8%ADapt-get%E5%AE%89%E8%A3%85%E7%9A%84%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84/</guid>
      <description>博客源地址：https://blog.csdn.net/yanhx1204/article/details/54893581
一、apt-get 安装 deb是debian linus的安装格式，跟red hat的rpm非常相似，最基本的安装命令是：dpkg -i file.deb或者直接双击此文件
dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。 以下是一些 Dpkg 的普通用法：
1、dpkg -i 安装一个 Debian 软件包，如你手动下载的文件。
2、dpkg -c 列出 的内容。
3、dpkg -I 从 中提取包裹信息。
4、dpkg -r 移除一个已安装的包裹。
5、dpkg -P 完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。
6、dpkg -L 列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。
7、dpkg -s 显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .</description>
    </item>
    
    <item>
      <title>编程开发技术学习资源整理</title>
      <link>/posts/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 26 Feb 2021 14:19:14 +0000</pubDate>
      
      <guid>/posts/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</guid>
      <description>0.大纲概览 主要介绍一下，本片文章涉及到的内容
1.编程语言,含c++、go、java
1.编程语言语法 1.1 C++ 1.2 Golang ①W3Cschool https://www.w3cschool.cn/yqbmht/7rcvwcqm.html 描述：前几章可以做入门使用，之后几章多了一些网络通信的编程
②https://draveness.me/golang/入门级学习
③https://draveness.me/golang/docs/part1-prerequisite/ch01-prepare/golang-debug/ 更加底层的学习go语言，设计到汇编，内容细致，干活多
1.3 Java 2.Linux命令速查 https://blog.csdn.net/waitig1992/article/details/51884653 描述：通过预览页快速定位到http://www.linuxdaxue.com/，快速定位把
3.Nginx学习 源码学习：
https://www.kancloud.cn/digest/understandingnginx/202587 章节式学习，有些枯燥
https://segmentfault.com/a/1190000016922188 单独对nginx配置文件解析过程进行的分析
4.算法 https://labuladong.gitbook.io/algo/内容生动，总结力强，是提升效率的好文章，主讲算法刷题套路、算法框架总结</description>
    </item>
    
    <item>
      <title>hexo博客添加友链检测界面UptimeRobot&#43;CupSatus</title>
      <link>/posts/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE%E6%A3%80%E6%B5%8B%E7%95%8C%E9%9D%A2uptimerobot-cupsatus/</link>
      <pubDate>Wed, 03 Feb 2021 18:01:58 +0000</pubDate>
      
      <guid>/posts/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE%E6%A3%80%E6%B5%8B%E7%95%8C%E9%9D%A2uptimerobot-cupsatus/</guid>
      <description>0.效果展示 1.前期准备 a.注册UptimeRobot账号，将自己的网站和要检测的网站或者账号加上去
b.去https://github.com/izoyo/Cup网址下载CupStatus页面
2.应用到自己的hexo博客上 hexo new page &amp;ldquo;friendlink_status&amp;rdquo; 页面
在source/friendlink_status/中把CupSatus的所有文件放进去，目录如下
按照开源项目CupSatus中说的把js/config.js中的key替换成自己upTimeRobot账号下对应的api key即可
然后在博客目录/config.yml 注意不是主题目录下的那个配置文件
加入skip-render: -friendlink_status/** 不使用主题的layout.ejs渲染这个页面
在主题的配置文件中菜单导航栏上加入这个页面即可</description>
    </item>
    
    <item>
      <title>博客美化增加瀑布流相册</title>
      <link>/posts/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E7%80%91%E5%B8%83%E6%B5%81%E7%9B%B8%E5%86%8C/</link>
      <pubDate>Tue, 26 Jan 2021 14:53:03 +0000</pubDate>
      
      <guid>/posts/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E7%80%91%E5%B8%83%E6%B5%81%E7%9B%B8%E5%86%8C/</guid>
      <description>参考链接:
来源: itsNekoDeng 文章作者: NekoDeng 文章链接: https://nekodeng.gitee.io/posts/waterfall-flow-photo-album.html#toc-heading-9
自己经过修改后移植到sakura主题
1.增加相册界面和相册详情页面 1.1新建gallery界面(相册概览) hexo new &amp;quot;gallery&amp;quot;在博客目录/source/gallery可以看到index.md文件，修改内容如下
---title: gallerycomments: falsedate: 2021-01-25 19:40:18keywords:description:photos:layout: &amp;quot;gallery&amp;quot;---1.2增加相册详情页
在博客目录创建/source/gallery/test/index.md
创test文件夹
及其下面的index.md文件index内容为
---title: testdate: 2020-10-02 23:00:17 type: &amp;quot;galleries&amp;quot; layout: &amp;quot;galleries&amp;quot; password:---1.2相册加密功能（选用） 在上面index.md文件中，可以实现加密功能，加密使用SHA256加密，所以在加密前需要先将你的密码转换成SHA256格式然后输入到最上面的创建相片页面的index.md的password里面。至于SHA256加密，请自行网上搜索在线生成，例如: http://www.ttmd5.com/hash.php?type=9
编辑主题导航栏加入相册按钮 2.新增布局样式文件 在博客目录/themes/sakura/layout/位置下新增两个文件gallery.ejs、galleries.ejs</description>
    </item>
    
    <item>
      <title>回溯算法刷题整理总结</title>
      <link>/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 20 Jan 2021 11:07:57 +0000</pubDate>
      
      <guid>/posts/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description>一、回溯算法理解 本质是以深度遍历的方式遍历决策树
但因为没有具体的TreeNode构成树，所以回溯与DFS遍历树很像，但不同的是回溯要多一步退回选择的操作
典型问题:全排列、N皇后问题
回溯算法的构成要素:
①选择列表
②已选路径或已做出的选择(trace或used)
③结束条件
回溯算法的模板如下:
def backTrace(已选路径, 选择列表) {if(结束条件) {return ; // 对于return 如果只问是否有解则返回bool即可;如果要所有的解则用全局变量数组保存所有找到的解}for 某选择:选择列表 {if(不必要选择) {continue;}做选择:某选择加入已选路径，下一步选择列表是否变化backTrace(已选路径, 选择列表)回退选择:某选择退出已选路径，回退后选择列表是否需要恢复}}回溯算法的思路如下:
画决策树，决策树节点的属性就是 选择和当前路径 我们的backTrace函数在树的各个节点游走，知道遇到结束条件</description>
    </item>
    
    <item>
      <title>主题美化增加春节、圣诞、深夜主题模式</title>
      <link>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E6%98%A5%E8%8A%82%E5%9C%A3%E8%AF%9E%E6%B7%B1%E5%A4%9C%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 12 Jan 2021 20:58:50 +0000</pubDate>
      
      <guid>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E6%98%A5%E8%8A%82%E5%9C%A3%E8%AF%9E%E6%B7%B1%E5%A4%9C%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%BC%8F/</guid>
      <description>0.设计原理 ①给一系列的css属性起名字如dark表示黑夜，默认为失效不显示 ②页面上增加左侧主题切换按钮,按钮处理逻辑为将所有dark对应的css属性启用，并设置标记位
1.增加主题切换按钮及其js处理逻辑 位置:themes/sakura/layout/layout.ejs 这个文件会在所有页面生效
内容如下:（ps:多了个大红灯笼的div）
 &amp;lt;!-- 8.增加红灯笼按钮--&amp;gt;&amp;lt;!--深夜模式按钮--&amp;gt;&amp;lt;a onclick=&amp;quot;switchNightMode()&amp;quot; id=&amp;quot;sma&amp;quot;&amp;gt; &amp;lt;i class=&amp;quot;fa fa-moon-o&amp;quot; id=&amp;quot;nightMode&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;!--圣诞模式按钮--&amp;gt; &amp;lt;script&amp;gt;if (localStorage.getItem(&#39;themechris&#39;) === &#39;1&#39;) {document.body.classList.add(&#39;themechris&#39;);}else if (matchMedia(&#39;(prefers-color-scheme: themechris)&#39;).matches) {document.body.classList.add(&#39;themechris&#39;);}&amp;lt;/script&amp;gt;&amp;lt;a onclick=&amp;quot;switchChrisThemes()&amp;quot; id=&amp;quot;switchchristmas&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;theme-buttonchrismas&amp;quot; src=&amp;quot;https://hesifan.top/medias/christmas-img/ball.jpg&amp;quot; title=&amp;quot;圣诞模式&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;!--春节模式按钮--&amp;gt; &amp;lt;script&amp;gt;if (localStorage.getItem(&#39;themespring&#39;) === &#39;1&#39;) {document.</description>
    </item>
    
    <item>
      <title>博客美化增加任务清单页面</title>
      <link>/posts/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Mon, 11 Jan 2021 20:04:09 +0000</pubDate>
      
      <guid>/posts/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95%E9%A1%B5%E9%9D%A2/</guid>
      <description>参考链接:https://nekodeng.gitee.io/posts/todolist-page.html#toc-heading-1
1.新建todolist页面 hexo new page &amp;quot;todolist&amp;quot;2.配置该页面跳过渲染 这次添加的页面是一个html页面，需要配置跳过渲染后不会使用主题的layout对网页进行渲染
在主站的配置文件的skip:render种配置
skip_render: - &amp;quot;todolist/**&amp;quot;3.修改todolist界面 博客目录下/source/todolist/index.md 改为index.html， 文件内容如下:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; body{ margin:0;background-color:#fafafa;font:14px &#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif} h2{margin:0;font-size:12px} a{color:#000;text-decoration:none} input{outline:0} button{margin:0;padding:0;border:0;background:0;font-size:100%;vertical-align:baseline;font-family:inherit;font-weight:inherit;color:inherit;outline:0} ul{padding:0;margin:0;list-style:none} .page-top{width:100%;height:40px;background-color:#db4c3f} .page-content{width:50%;margin:0 auto} .page-content h2{line-height:40px;font-size:18px;color:#fff} .main{width:50%;margin:0 auto;box-sizing:border-box} .task-input{width:99%;height:30px;outline:0;border:1px solid #ccc} .task-count{display:flex;margin:10px 0} .task-count li{padding-left:10px;flex:1;color:#dd4b39} .</description>
    </item>
    
    <item>
      <title>Markdown语法整理</title>
      <link>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0/</link>
      <pubDate>Sat, 26 Dec 2020 20:54:07 +0000</pubDate>
      
      <guid>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0/</guid>
      <description>MarkDown快速查询转移字符 公式块部分 举例
$$dp[i]=\begin{cases}计算式1 &amp;amp;计算式条件 \\换行计算式2 &amp;amp;计算式条件 \\换行\end{cases}$$详细表格
   公式块 \begin{cases} 内容 \end{cases} 大公式表达式     \big[ 比较大的左中括号    \bigg[ 再大一点    \Big[ 比big大一点    \Bigg[ 比bigg大一点    a_2 a下标2 a^3 a上标3 上标下标    \sum ：∑ \int ：∫ \oint ：∮ \prod：∏ 求和、求导    \alpha： α \beta： β \gamma：γ \Phi ： Φ \Omega：Ω \Delta： Δ \delta： δ 希腊字母     代码块部分 代码块折叠语法如下</description>
    </item>
    
    <item>
      <title>主题美化添加文章阅读计数统计和网站运行事件</title>
      <link>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E8%AE%A1%E6%95%B0%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Sat, 26 Dec 2020 20:31:05 +0000</pubDate>
      
      <guid>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E8%AE%A1%E6%95%B0%E7%BB%9F%E8%AE%A1/</guid>
      <description>在主题目录/layout/_partial/footer.ejs中 &amp;lt;div class=&amp;ldquo;footer-device&amp;rdquo;&amp;gt;和&amp;lt;div class=&amp;ldquo;site-info&amp;rdquo;&amp;gt;的下面之间加入如下代码
 &amp;lt;!-- 网站数据统计 --&amp;gt;&amp;lt;div class=&amp;quot;footer-device&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;font-family: &#39;Ubuntu&#39;, sans-serif;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #ff9999;padding-left: 20px;&amp;quot;&amp;gt;&amp;lt;!-- 网站运行时间统计 --&amp;gt;&amp;lt;i class=&amp;quot;fa fa-clock-o&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;span id=&amp;quot;time&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;载入时间中...&amp;lt;/span&amp;gt;&amp;lt;script&amp;gt;var now = new Date(); function createtime() { var grt= new Date(&amp;quot;&amp;lt;%- theme.siteBuildingTime %&amp;gt;&amp;quot;);//在此处修改你的建站时间now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;读取文件到内存中流程含示例</title>
      <link>/posts/c-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%88%B0%E5%86%85%E5%AD%98%E4%B8%AD%E6%B5%81%E7%A8%8B%E5%90%AB%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Sat, 26 Dec 2020 10:26:53 +0000</pubDate>
      
      <guid>/posts/c-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%88%B0%E5%86%85%E5%AD%98%E4%B8%AD%E6%B5%81%E7%A8%8B%E5%90%AB%E7%A4%BA%E4%BE%8B/</guid>
      <description>一、示例说明 程序输入为种子用户ID数据集合，每一行包括用户ID和256维用户特征，用户特征数据类型为浮点型数据（存在部分数据用科学计数法表示的情况，比如1.4283673760891302E-4），所有数据分隔符为逗号，ID处于第1个位置，其它256维特征按照顺序处于2-257个位置。其中1-128维为连续性特征，数据都大于等于0小于等于1，余下129-256维为分类型特征经过one-hot处理过后的稀疏数据，数据都为0或者1。如下格式： ID0001,0.1,0,0.56,…,0,1
保存变量的结构体如下：
typedef struct User{string id;float fv[128];int iv[128];};计划读取文件每一行记录一个User变量的成员，元素1为id，元素2~129为fv,元素130~257为iv
二、读取文件代码 示例代码:
#include &amp;lt;QCoreApplication&amp;gt;#include &amp;lt;fstream&amp;gt;#include &amp;lt;sstream&amp;gt;using namespace std;typedef struct {string id;float fv[128];int iv[128];}User;int main(int argc, char *argv[]){QCoreApplication a(argc, argv);fstream seedf(&amp;quot;C:\\Users\\linxuesong\\Desktop\\cpp\\input\\seed.txt&amp;quot;);vector&amp;lt;User&amp;gt; users;while(!seedf.eof()) {string oneline;getline(seedf, oneline);User user;// 将一行按逗号分隔stringstream ss(oneline);getline(ss, user.</description>
    </item>
    
    <item>
      <title>hexo&#43;valine搭建博客评论系统</title>
      <link>/posts/hexo&#43;valine%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 26 Dec 2020 10:26:53 +0000</pubDate>
      
      <guid>/posts/hexo&#43;valine%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>hexo+valine搭建博客评论系统 1.注册LeanCloud
2.在leanCloud中创建应用
3.拿到appid和appkey
然后 进入应用-&amp;gt;设置-&amp;gt;应用key
拿到你的appid和appkey之后，打开主题配置文件 搜索 valine，填入appid 和 appkey
4.修改hexo博客主题目录themes/Skaura/_config.yml配置文件中的valine部分内容
# Valinevaline: truev_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHszv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ5.记得在Leancloud -&amp;gt; 设置 -&amp;gt; 安全中心 -&amp;gt; Web 安全域名 把你的域名加进去
最后当我们发送一条评论后可以在leanCloud中的 存储/结构化数据/comment看到评论信息
PS:valine还可以美化评论背景样式、增加评论邮件通知等等的功能
参考博客:https://blog.csdn.net/cungudafa/article/details/104281764
PS:可以在https://en.gravatar.com/网站上注册头像呦，这样就可以在评论时显示自己邮箱绑定的头像了</description>
    </item>
    
    <item>
      <title>博客增加建站日志页</title>
      <link>/posts/%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Tue, 22 Dec 2020 11:16:18 +0000</pubDate>
      
      <guid>/posts/%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97%E9%A1%B5%E9%9D%A2/</guid>
      <description>1.主题目录/layout/sitelog.ejs &amp;lt;div class=&amp;quot;blank&amp;quot; style=&amp;quot;padding-top: 75px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;pattern-center &amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;pattern-attachment-img&amp;quot;&amp;gt;&amp;lt;% if (page.photos) { %&amp;gt;&amp;lt;img src=&amp;quot;&amp;lt;%= page.photos %&amp;gt;&amp;quot; src=&amp;quot;&amp;lt;%- theme.lazyloadImg %&amp;gt;&amp;quot; data-src=&amp;quot;&amp;lt;%= page.photos %&amp;gt;&amp;quot; class=&amp;quot;lazyload&amp;quot; onerror=&amp;quot;imgError(this,3)&amp;quot; style=&amp;quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&amp;quot;&amp;gt;&amp;lt;% } else { %&amp;gt;&amp;lt;img src=&amp;quot;&amp;lt;%= theme.bg[Math.floor(Math.random() * theme.bg.length + 1)-1] %&amp;gt;&amp;quot; src=&amp;quot;&amp;lt;%- theme.</description>
    </item>
    
    <item>
      <title>nginx编写自定义http模块过程整理</title>
      <link>/posts/nginx%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89http%E6%A8%A1%E5%9D%97%E8%BF%87%E7%A8%8B%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 21 Dec 2020 17:22:22 +0000</pubDate>
      
      <guid>/posts/nginx%E7%BC%96%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89http%E6%A8%A1%E5%9D%97%E8%BF%87%E7%A8%8B%E6%95%B4%E7%90%86/</guid>
      <description>一、整体过程梳理 1.编写nginx_http_module_t变量nginx_http_hello_module
2.挂载到处理http请求过程种
3.
二、具体编写 我们编写过程采用总分的结构，先写整体,再具体每一个成员
1.定义自定义http模块变量 ngx_http_hello_module 1.1模板结构体ngx_http_module_t成员说明 说明 ♥是重点变量
ngx_http_module_t ngx_http_hello_module {ngx_uint_t ctx_index; // 该模块在当前类别(http类别，core event mail)中的排名序号 nginx框架用到ngx_uint_t index; // 该模块在所有类别模块中的排名序号 nginx框架用到ngx_uint_t spare0;//一共四个sapre保留变量暂未用ngx_uint_t spare1;ngx_uint_t spare2;ngx_uint_t spare3;ngx_uint_t version; // 模块版本 包含当前变量在内之前的共7个变量可以用提供好的#define NGX_MODULE_V1去填充void *ctx; // 模块的上下文结构 一个非常重要的变量,主要作用:1.设置读取配置文件完成前后的回调函数，①对不同配置值如何处理②设置该模块挂载到http流程的方式③是处理http请求并返回http响应的一个位置，可以以按阶段处理的方式挂在到http处理流程中2.设置不同级别配置项创建方法，供nginx框架遇到模块感兴趣的配置项时调用创建响应的自定义配置项信息结构体 ♥ngx_command_t *commands; // 指令集合,当和配置文件某项匹配后 执行自定义的指令函数 主要作用:遇到配置项文件后执行自定义函数，函数可以①读取配置文件内容；②是一个处理http请求的位置，以按需分配的方式挂载到http处理流程中♥ngx_uint_t type; //模块类型 core event http mail ♥ngx_int_t (*init_master)(ngx_log_t *log); // 初始化master执行ngx_int_t (*init_module)(ngx_cycle_t *cycle); // 初始化module执行ngx_int_t (*init_process)(ngx_cycle_t *cycle); ngx_int_t (*init_thread)(ngx_cycle_t *cycle);void (*exit_thread)(ngx_cycle_t *cycle);void (*exit_process)(ngx_cycle_t *cycle);void (*exit_master)(ngx_cycle_t *cycle); // 退出master执行uintptr_t spare_hook0; // 保留字段未用,可以用提供好的#define NGX_MODULE_V1_PADDING取填充8个变量uintptr_t spare_hook1;uintptr_t spare_hook2;uintptr_t spare_hook3;uintptr_t spare_hook4;uintptr_t spare_hook5;uintptr_t spare_hook6;uintptr_t spare_hook7;}1.</description>
    </item>
    
    <item>
      <title>nginx安装过程及相关使用命令</title>
      <link>/posts/nginx%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 21 Dec 2020 17:12:00 +0000</pubDate>
      
      <guid>/posts/nginx%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E5%8F%8A%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>一、安装过程 Nginx安装过程
这里提供两种方式，快速使用
如果是ubuntu可以直接用下面命令安装
 apt install nginx这里详细说一下第二种方式:
0.前期准备(重要，不然会导致下面第3步失败) 安装所需的gcc和依赖库
4.1、GCC——GNU编译器集合 ubuntu: apt-get install gcc linux: yum install gcc-c++ 4.2、PCRE库 ubuntu:apt-get install libpcre3 libpcre3-devlinux: yum install -y pcre pcre-devel4.3、zlib库 ubuntu: apt-get install zlib1g zlib1g-devlinux: yum install -y zlib zlib-devel4.4、OpenSSL库 ubuntu:apt-get install openssl openssl-devlinux: yum install -y openssl openssl-devel1.</description>
    </item>
    
    <item>
      <title>增加文章统计折线图、饼状图</title>
      <link>/posts/%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E7%BB%9F%E8%AE%A1%E6%8A%98%E7%BA%BF%E5%9B%BE%E9%A5%BC%E7%8A%B6%E5%9B%BE/</link>
      <pubDate>Fri, 18 Dec 2020 18:03:16 +0000</pubDate>
      
      <guid>/posts/%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E7%BB%9F%E8%AE%A1%E6%8A%98%E7%BA%BF%E5%9B%BE%E9%A5%BC%E7%8A%B6%E5%9B%BE/</guid>
      <description>1.sakura/layout/analytics.ejs &amp;lt;div class=&amp;quot;pattern-center-blank&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;pattern-center &amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;pattern-attachment-img&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://cdn.jsdelivr.net/gh/drew233/cdn/20200303155335.webp&amp;quot; data-src=&amp;quot;&amp;lt;%= page.photos %&amp;gt;&amp;quot;class=&amp;quot;lazyload&amp;quot; onerror=&amp;quot;imgError(this,3)&amp;quot;style=&amp;quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;#contentss {position: relative;width: 800px;height: 900px;max-height: 1200px;text-align: center;border: 0;color: rgba(0, 0, 0, .87);background: rgba(255, 255, 255, .</description>
    </item>
    
    <item>
      <title>使用主题的个人插件在文章中插入B站外链视频和图片</title>
      <link>/posts/%E4%BD%BF%E7%94%A8%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%8F%92%E4%BB%B6%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5b%E7%AB%99%E5%A4%96%E9%93%BE%E8%A7%86%E9%A2%91%E5%92%8C%E5%9B%BE%E7%89%87/</link>
      <pubDate>Fri, 18 Dec 2020 11:20:10 +0000</pubDate>
      
      <guid>/posts/%E4%BD%BF%E7%94%A8%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%8F%92%E4%BB%B6%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5b%E7%AB%99%E5%A4%96%E9%93%BE%E8%A7%86%E9%A2%91%E5%92%8C%E5%9B%BE%E7%89%87/</guid>
      <description>写文章配置 主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：
{% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。
hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：
{% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img</description>
    </item>
    
    <item>
      <title>主题美化添加自己的书单页面</title>
      <link>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B9%A6%E5%8D%95%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Fri, 18 Dec 2020 10:58:12 +0000</pubDate>
      
      <guid>/posts/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B9%A6%E5%8D%95%E9%A1%B5%E9%9D%A2/</guid>
      <description>参考
https://blog.csdn.net/qq_44846853/article/details/104563887
0.准备安装hexo-douban插件 npm install hexo-douban --save 1.修改主站目录(非主题目录)的_config.yml 博客目录/_config.yml下新建books.ejs
内容如下
douban: user: 252345665 #这个需要修改为你个人的id builtin: false #如果想生成豆瓣页面，这个需要设置为truebook: title: &#39;This is my book title&#39; quote: &#39;This is my book quote&#39; movie: title: &#39;This is my movie title&#39; quote: &#39;This is my movie quote&#39; game: title: &#39;This is my game title&#39; quote: &#39;This is my game quote&#39; timeout: 10000说明:</description>
    </item>
    
    <item>
      <title>将博客网站生成手机app获取下载安装码</title>
      <link>/posts/%E5%B0%86%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E6%89%8B%E6%9C%BAapp%E8%8E%B7%E5%8F%96%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E7%A0%81/</link>
      <pubDate>Thu, 17 Dec 2020 16:15:26 +0000</pubDate>
      
      <guid>/posts/%E5%B0%86%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E6%89%8B%E6%9C%BAapp%E8%8E%B7%E5%8F%96%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E7%A0%81/</guid>
      <description>一门App网站 https://www.yimenapp.com/
这个比较靠谱，实惠</description>
    </item>
    
    <item>
      <title>如何调整顶部导航栏的整体长度以放入更多导航项</title>
      <link>/posts/%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%95%B4%E4%BD%93%E9%95%BF%E5%BA%A6%E4%BB%A5%E6%94%BE%E5%85%A5%E6%9B%B4%E5%A4%9A%E5%AF%BC%E8%88%AA%E9%A1%B9/</link>
      <pubDate>Thu, 17 Dec 2020 16:09:35 +0000</pubDate>
      
      <guid>/posts/%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4%E9%A1%B6%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E6%95%B4%E4%BD%93%E9%95%BF%E5%BA%A6%E4%BB%A5%E6%94%BE%E5%85%A5%E6%9B%B4%E5%A4%9A%E5%AF%BC%E8%88%AA%E9%A1%B9/</guid>
      <description>修改主题目录/source/css/style.css文件 搜到如下内容按自己需要修改
属性： min-width越大一行所容纳的个数越多
​	left:值越大离左侧的距离越远，这里是以整个屏幕的百分比进行衡量的</description>
    </item>
    
    <item>
      <title>给博客添加小游戏界面谷歌恐龙小游戏加强版</title>
      <link>/posts/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%B0%B7%E6%AD%8C%E6%81%90%E9%BE%99%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%8A%A0%E5%BC%BA%E7%89%88/</link>
      <pubDate>Thu, 17 Dec 2020 14:02:56 +0000</pubDate>
      
      <guid>/posts/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%B0%B7%E6%AD%8C%E6%81%90%E9%BE%99%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%8A%A0%E5%BC%BA%E7%89%88/</guid>
      <description>已有的游戏界面演示链接
https://dinoswords.gg/
我们要做的就是添加一个引用接口即可
1.新建游戏界面文件dinoswords  hexo new page dinoswords因为markdown支持html所以
在博客目录/source/dinoswords/index.md接着生成好的内容填上:
&amp;lt;main class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;card&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;card-content&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;note info&amp;quot;&amp;gt;操作介绍：&amp;lt;br&amp;gt;开始游戏：首先点击屏幕 &amp;lt;br&amp;gt;跳跃：注意是“点击屏幕” ！&amp;lt;br&amp;gt;道具：跳跃后捡到的道具，使用下方对应26字母键盘键&amp;lt;br&amp;gt;支持手机，电脑，等设备玩耍，点击屏幕开始和跳跃。&amp;lt;/div&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;iframe width=&amp;quot;100%&amp;quot; height=&amp;quot;488px&amp;quot; src=&amp;quot;https://dinoswords.gg/&amp;quot; frameborder=&amp;quot;no&amp;quot; border=&amp;quot;0&amp;quot; scrolling=&amp;quot;no&amp;quot; marginwidth=&amp;quot;0&amp;quot; marginheight=&amp;quot;0&amp;quot; &amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;!-- &amp;lt;iframe width=&amp;quot;100%&amp;quot; height=&amp;quot;200px&amp;quot; src=&amp;quot;https://api.dlizi.com:555/dinogame/index.html&amp;quot; frameborder=&amp;quot;no&amp;quot; border=&amp;quot;0&amp;quot; scrolling=&amp;quot;no&amp;quot; marginwidth=&amp;quot;0&amp;quot; marginheight=&amp;quot;0&amp;quot; &amp;gt;&amp;lt;/iframe&amp;gt; --&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/main&amp;gt;如果格式不符合要求可自行修改</description>
    </item>
    
    <item>
      <title>Sakura添加在线和博主聊天功能</title>
      <link>/posts/sakura%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E5%92%8C%E5%8D%9A%E4%B8%BB%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 16 Dec 2020 17:49:00 +0000</pubDate>
      
      <guid>/posts/sakura%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E5%92%8C%E5%8D%9A%E4%B8%BB%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/</guid>
      <description>参考博客:https://blog.csdn.net/cungudafa/article/details/104295156
添加 DaoVoice 在线聊天功能 效果展示
1.官网注册账号获取appid修改conifg文件 前往 DaoVoice 官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中。
daovoice:enable: truedaovoice_app_id: 7e5676fe ##这里替换成你DaoVoice上的appid2.在footer.ejs文件末尾中添加  &amp;lt;script&amp;gt;(function(i,s,o,g,r,a,m){i[&amp;quot;DaoVoiceObject&amp;quot;]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&amp;quot;utf-8&amp;quot;;m.parentNode.insertBefore(a,m)})(window,document,&amp;quot;script&amp;quot;,(&#39;https:&#39; == document.location.protocol ? &#39;https:&#39; : &#39;http:&#39;) + &amp;quot;//widget.daovoice.io/widget/&amp;lt;%= theme.daovoice.daovoice_app_id%&amp;gt;.js&amp;quot;,&amp;quot;daovoice&amp;quot;);daovoice(&#39;init&#39;, {app_id: &amp;quot;&amp;lt;%= theme.daovoice.daovoice_app_id%&amp;gt;&amp;quot;});daovoice(&#39;update&#39;);3.配置自己喜欢的聊天样式 4.可以绑定微信\邮箱,如果有人发消息会邮箱\微信消息提醒,在官网查看 </description>
    </item>
    
    <item>
      <title>Sakura主题添加背景切换功能</title>
      <link>/posts/sakura%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%88%87%E6%8D%A2%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 16 Dec 2020 17:23:02 +0000</pubDate>
      
      <guid>/posts/sakura%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%88%87%E6%8D%A2%E5%8A%9F%E8%83%BD/</guid>
      <description>参考博客:https://cuitianyu.site/Sakura-config-home-20200901.html
恢复切换主题背景功能 该功能的前端展示在hexo版本的sakura主题作者删除了,但是js和css代码没有删除，如果要恢复只需重新引用这部分js和css代码即可
1.从博客根目录themes/sakura/layout/layout.ejs的&amp;lt;body&amp;gt;中添加  &amp;lt;!-- 实现换肤功能 --&amp;gt;&amp;lt;%- partial(&#39;_partial/skin-list&#39;) %&amp;gt; &amp;lt;%- partial(&#39;_partial/skin-btn&#39;, null, {cache: !config.relative_link}) %&amp;gt;&amp;lt;%- partial(&#39;_partial/mheader&#39;, null, {cache: !config.relative_link}) %&amp;gt;&amp;lt;%- partial(&#39;_partial/aplayer&#39;, null, {cache: !config.relative_link}) %&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;2.在themes/Sakura/layout/_partial文件夹下依次新建skin-btn.ejs和skin-list.ejs skin-btn.ejs的内容为：
&amp;lt;div class=&amp;quot;changeSkin-gear no-select&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;keys&amp;quot; id=&amp;quot;setbtn&amp;quot;&amp;gt; &amp;lt;span id=&amp;quot;open-skinMenu&amp;quot;&amp;gt; 切换主题 | SCHEME TOOL &amp;lt;i class=&amp;quot;iconfont icon-gear inline-block rotating&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;skin-list.</description>
    </item>
    
    <item>
      <title>每页文章结尾出增加标签云展示</title>
      <link>/posts/%E6%AF%8F%E9%A1%B5%E6%96%87%E7%AB%A0%E7%BB%93%E5%B0%BE%E5%87%BA%E5%A2%9E%E5%8A%A0%E6%A0%87%E7%AD%BE%E4%BA%91%E5%B1%95%E7%A4%BA/</link>
      <pubDate>Fri, 11 Dec 2020 21:01:19 +0000</pubDate>
      
      <guid>/posts/%E6%AF%8F%E9%A1%B5%E6%96%87%E7%AB%A0%E7%BB%93%E5%B0%BE%E5%87%BA%E5%A2%9E%E5%8A%A0%E6%A0%87%E7%AD%BE%E4%BA%91%E5%B1%95%E7%A4%BA/</guid>
      <description>https://blog.csdn.net/cungudafa/article/details/104616500</description>
    </item>
    
    <item>
      <title>主题博客增加天气插件</title>
      <link>/posts/%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 11 Dec 2020 20:59:21 +0000</pubDate>
      
      <guid>/posts/%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/</guid>
      <description>效果预览：
1.注册和风天气账号 官方网址如下https://www.qweather.com/
2.导入生成的插件代码 博客目录\themes\Sakura\layout_partial\header.ejs 嵌入到代码的最尾部</description>
    </item>
    
    <item>
      <title>增加文章贡献日历</title>
      <link>/posts/%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86/</link>
      <pubDate>Fri, 11 Dec 2020 20:59:21 +0000</pubDate>
      
      <guid>/posts/%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86/</guid>
      <description>https://blog.csdn.net/cungudafa/article/details/106420842</description>
    </item>
    
    <item>
      <title>动态规划刷题整理</title>
      <link>/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 10 Dec 2020 20:04:41 +0000</pubDate>
      
      <guid>/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>LeetCode刷题集锦 5. 最长回文子串 题目描述 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
示例 1：输入: &amp;quot;babad&amp;quot;输出: &amp;quot;bab&amp;quot;注意: &amp;quot;aba&amp;quot; 也是一个有效答案。示例 2：输入: &amp;quot;cbbd&amp;quot;输出: &amp;quot;bb&amp;quot;解题思路 ①想到最优子结构
大字符串是回文，把首尾字符取去掉后小字符串也是回文 aba是回文，取首尾后子串b也是
②最小子问题
只有一个字母，必定是回文
有两个子母且两个字母相等才是回文
③状态转移方程 最小子问题如何推出大问题 $$ dp(i,j)=\begin{cases} true &amp;amp; i==j只有一个字母 \
str[j]==str[i] &amp;amp; j-i==1两个子母 \
dp(i+1,j-1)且str[j]==str[i] &amp;amp;j-i&amp;gt;1 大于两个字母 \end{cases} $$ ④实现动态规划</description>
    </item>
    
    <item>
      <title>hexo增加RSS订阅功能</title>
      <link>/posts/hexo%E5%A2%9E%E5%8A%A0rss%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 04 Dec 2020 12:12:05 +0000</pubDate>
      
      <guid>/posts/hexo%E5%A2%9E%E5%8A%A0rss%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/</guid>
      <description>Hexo增加RSS订阅 RSS介绍 生成自己网站的聚合信息，让别人去订阅供其收获你自己的最新消息 ——有了RSS后别人可以关注了你的最新博客动态了
向自己主题中添加RSS功能步骤 1.安装插件 npm install hexo-generator-feed2.主题配置文件中增加 # Extensions## Plugins: http://hexo.io/plugins/#RSS订阅plugin:hexo-generator-feed#Feed Atomfeed:type: atom #RSS的类型(atom/rss2)path: atom.xml #文件路径,默认是atom.xml/rss2.xmllimit: 20 #展示文章的数量,使用0或则false代表展示全部hub:content: #在RSS文件中是否包含内容 ,有3个值 true/false默认不填为falsecontent_limit: 140 #指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现content_limit_delim: &#39; &#39; #上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.order_by: -dateicon: #icon.png3.themes\sakura_config.yml # 简易信息聚合,站点共享rss: /atom.</description>
    </item>
    
    <item>
      <title>Leetcode-119.杨辉三角 II</title>
      <link>/posts/leetcode119.-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92-ii/</link>
      <pubDate>Tue, 01 Sep 2020 20:19:42 +0000</pubDate>
      
      <guid>/posts/leetcode119.-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92-ii/</guid>
      <description>LeetCode119. 杨辉三角 II 1.0题目描述 给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。
在杨辉三角中，每个数是它左上方和右上方的数的和。
示例:
输入: 3输出: [1,3,3,1]进阶：
你可以优化你的算法到 O(k) 空间复杂度吗？
2.0 题目分析 和上一题118联系一起，我们发现二维数组存杨辉三角上一层数组生成下一层数组，现在要求仅用一维数组存储
如何在一维数组的前提下，使用我们的递推公式
本层arr[i]=上一层arr[i] + 上一层arr[i-1]
3.0两种思路对比 3.1正向遍历思维 遍历时
arr[0] = arr[0]上一层
本层arr[1] = arr[1]上一层 + arr[0]上一层
本层arr[2] = arr[2]上一层+arr[1]（公式要求上一层，但这一步已经arr[1]变成本层了）
所以正向遍历思路就是保存这个上一层的arr[i]
需要变量个数分析：一次遍历要 保存本层arr[i]、用上一层arr[i-1]
保存是一个变量cur 用上一层又是一个变量pre
代码如下
func getRow(rowIndex int) []int { ret := make([]int, rowIndex+1) for i := 0; i &amp;lt; rowIndex+1; i++ { pre := 0 cur := ret[0] for j:=0; j &amp;lt; i; j++ { ret[j] = pre + cur pre,cur = cur, ret[j+1] } ret[i] = 1 } return ret } 进一步优化如果不用两个变量保存，而是换一种方式呢</description>
    </item>
    
    <item>
      <title>58信天翁训练活动</title>
      <link>/posts/58%E4%BF%A1%E5%A4%A9%E7%BF%81%E8%AE%AD%E7%BB%83%E6%B4%BB%E5%8A%A8/</link>
      <pubDate>Sat, 15 Aug 2020 23:16:53 +0000</pubDate>
      
      <guid>/posts/58%E4%BF%A1%E5%A4%A9%E7%BF%81%E8%AE%AD%E7%BB%83%E6%B4%BB%E5%8A%A8/</guid>
      <description>校招新入职训练活动：
时间悄悄地从手里溜走，或许我已不再年轻，不再可以懵懂无知。转眼入职一月有余，一个人一段过往，一个人一段羁绊。我们走走停停，历风雨、经风霜，有过彩红有过微笑有过眼泪，我大多生命都在厌恶着世界、逃离着生活，试过爱世界，试过把自己关在自己的心里，我办不到，像是躲进心里的黑屋，外面的人熙熙攘攘，他们的声音、行动，你看在眼里停入耳中却无法组织进入心中。哭泣的心灵渴望陪伴和安慰，心声一次次一遍遍告诉自己去得到爱，然而生活中无法感受爱。</description>
    </item>
    
    <item>
      <title>Leetcode88. 合并两个有序数组</title>
      <link>/posts/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Wed, 12 Aug 2020 20:19:13 +0000</pubDate>
      
      <guid>/posts/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>Leetcode-88. 合并两个有序数组
1.问题描述 给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
说明:
初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
示例:
输入: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3
输出: [1,2,2,3,5,6]
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/merge-sorted-array 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</description>
    </item>
    
    <item>
      <title>Leetcode-66. 加一</title>
      <link>/posts/leetcode-66-%E5%8A%A0%E4%B8%80/</link>
      <pubDate>Wed, 12 Aug 2020 17:16:49 +0000</pubDate>
      
      <guid>/posts/leetcode-66-%E5%8A%A0%E4%B8%80/</guid>
      <description>Leetcode-66. 加一
1.0题目描述 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
示例 1:
输入: [1,2,3] 输出: [1,2,4] 解释: 输入数组表示数字 123。 示例 2:
输入: [4,3,2,1] 输出: [4,3,2,2] 解释: 输入数组表示数字 4321。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/plus-one 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
2.0解题思路 这道题比较简单，从后向前遍历找到第一个非9数字，记下标为not9first，该下标之后所有数全为0，本下标元素值+1 对异常情况值溢出做特殊处理
3.0实现代码 func plusOne(digits []int) []int {oldLen := len(digits)not9first := oldLen-1 // 从后向前非9的第一个数for ; not9first &amp;gt;= 0 &amp;amp;&amp;amp; digits[not9first] == 9; not9first-- {digits[not9first] = 0 // 是9就成0}if(not9first !</description>
    </item>
    
    <item>
      <title>Hexo-Sakura标签云分类云</title>
      <link>/posts/hexo-sakura%E6%A0%87%E7%AD%BE%E4%BA%91%E5%88%86%E7%B1%BB%E4%BA%91/</link>
      <pubDate>Wed, 12 Aug 2020 14:23:37 +0000</pubDate>
      
      <guid>/posts/hexo-sakura%E6%A0%87%E7%AD%BE%E4%BA%91%E5%88%86%E7%B1%BB%E4%BA%91/</guid>
      <description>本文参考博客https://www.sakura521.cn/technology/sakurameihua.html
添加优美的标签页 效果图如下：
概览 我们要创建四个文件，修改一个文件,最后新生成一个标签页面
新建文件1 博客目录\themes\Sakura\layout\tages.ejs ⚠：不是tag是tags
其内容如下：
&amp;lt;div class=&amp;quot;blank&amp;quot; style=&amp;quot;padding-top: 75px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;pattern-center &amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;pattern-attachment-img&amp;quot;&amp;gt;&amp;lt;% if (page.photos) { %&amp;gt;&amp;lt;img src=&amp;quot;&amp;lt;%= page.photos %&amp;gt;&amp;quot; src=&amp;quot;&amp;lt;%- theme.lazyloadImg %&amp;gt;&amp;quot; data-src=&amp;quot;&amp;lt;%= page.photos %&amp;gt;&amp;quot; class=&amp;quot;lazyload&amp;quot; onerror=&amp;quot;imgError(this,3)&amp;quot; style=&amp;quot;width: 100%; height: 100%; object-fit: cover; pointer-events: none;&amp;quot;&amp;gt;&amp;lt;% } else { %&amp;gt;&amp;lt;img src=&amp;quot;&amp;lt;%= theme.</description>
    </item>
    
    <item>
      <title>Leetcode-53. 最大子序和</title>
      <link>/posts/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</link>
      <pubDate>Tue, 11 Aug 2020 20:19:50 +0000</pubDate>
      
      <guid>/posts/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</guid>
      <description>Leetcode-53. 最大子序和
题目描述 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
示例:
n&amp;rsquo;j输入: [-2,1,-3,4,-1,2,1,-5,4] 输出: 6 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。 进阶:
如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/maximum-subarray 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
解法一：暴力方法O(n²) 解题思路 两层遍历，外层遍历所有元素，变量start；内层遍历start~结束元素，变量end
过程中维持着tmp_sum表示start~end的子序列和
两层遍历完找到最终的result
实现代码 func maxSubArray(nums []int) int {length := len(nums)if length == 0 {return 0}start := 0end := 0tmp_sum := 0result := nums[end]for ; start&amp;lt;length; start++ {tmp_sum = 0for end=start ; end&amp;lt;length; end++ {tmp_sum += nums[end]if(tmp_sum &amp;gt; result) {result = tmp_sum}}}return result}解法二：动态规划O(n) 解题思路 暴力方法里有重复的子问题，数组中 和最大的连续子序列</description>
    </item>
    
    <item>
      <title>Leetcode-35搜索插入位置</title>
      <link>/posts/leetcode-35%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Tue, 11 Aug 2020 20:19:42 +0000</pubDate>
      
      <guid>/posts/leetcode-35%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</guid>
      <description>Leetcode-35搜索插入位置
题目描述 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。
示例 1:
输入: [1,3,5,6], 5 输出: 2 示例 2:
输入: [1,3,5,6], 2 输出: 1 示例 3:
输入: [1,3,5,6], 7 输出: 4 示例 4:
输入: [1,3,5,6], 0 输出: 0
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/search-insert-position 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
解题思路 二分法很容易想到，但问题是怎么用，查找目标值是等于target，当low&amp;gt;high还未找到就没有
类推插入位置或匹配位置就是找顺序第一个 &amp;gt;=tartget 元素的位置
二分查找最后一定是left=right+1
如果left左开区间的值一直保持小于target，right右开区间一直保持大于等于target，
这样————right———————left—————
[0。。。。right]小于targrt
[left&amp;hellip;.length-1]大于等于target
即使边界时也一样
如果硬用二分查找值 &amp;lt; == &amp;gt; 三个分支匹配可看总结处理起来会很麻烦</description>
    </item>
    
    <item>
      <title>自己定的计划</title>
      <link>/posts/%E8%87%AA%E5%B7%B1%E5%AE%9A%E7%9A%84%E8%AE%A1%E5%88%92/</link>
      <pubDate>Tue, 11 Aug 2020 20:17:22 +0000</pubDate>
      
      <guid>/posts/%E8%87%AA%E5%B7%B1%E5%AE%9A%E7%9A%84%E8%AE%A1%E5%88%92/</guid>
      <description>自己定的计划
时间2020.8.8 ~ 2021.5.30
目标一：leetcode 150道题 整理并总结，计划按分类啥刷题 一个月25到题 按计划可以完成任务
附加：使用go、C++交叉编写 争取可以对基本的语法做到熟练
目标二：把Effective ++一书看完
目标三：看完一本和写小说技巧有关的书，可以写出几个短篇的小故事
目标四：英文、汉字的书写
目标五：可以喜欢上一个人，多参加活动、人际交往
长久相处靠品质，快速建立关系靠套路
让自己对新鲜的事情感兴趣，找一些途径吧：综艺、外出等等
目标六：如果喜欢上一个人，自己该如何获得关注，建立好感呢
多说话？学习如何表达喜欢，和让自己被喜欢
目标七：北京一些知名的景点，一个月去一个地方
目标八：每个周末总结自己计划，每个月规划自己</description>
    </item>
    
    <item>
      <title>Leetcode-28. 实现 strStr()</title>
      <link>/posts/leetcode-28-%E5%AE%9E%E7%8E%B0-strstr/</link>
      <pubDate>Tue, 11 Aug 2020 20:16:50 +0000</pubDate>
      
      <guid>/posts/leetcode-28-%E5%AE%9E%E7%8E%B0-strstr/</guid>
      <description>Leetcode-28. 实现 strStr() 题目描述 实现 strStr() 函数。
给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。
示例 1:
输入: haystack = &amp;ldquo;hello&amp;rdquo;, needle = &amp;ldquo;ll&amp;rdquo; 输出: 2 示例 2:
输入: haystack = &amp;ldquo;aaaaa&amp;rdquo;, needle = &amp;ldquo;bba&amp;rdquo; 输出: -1 说明:
当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。
对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</description>
    </item>
    
    <item>
      <title>Leetcode-27移除元素</title>
      <link>/posts/leetcode-27%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Tue, 11 Aug 2020 20:16:49 +0000</pubDate>
      
      <guid>/posts/leetcode-27%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>Leetcode-27移除元素
题目描述 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
示例 1:
给定 nums = [3,2,2,3], val = 3,
函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
你不需要考虑数组中超出新长度后面的元素。 示例 2:
给定 nums = [0,1,2,2,3,0,4,2], val = 2,
函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</description>
    </item>
    
    <item>
      <title>Hexo-Sakura如何写新博客</title>
      <link>/posts/hexo-sakura%E5%A6%82%E4%BD%95%E5%86%99%E6%96%B0%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 11 Aug 2020 20:15:41 +0000</pubDate>
      
      <guid>/posts/hexo-sakura%E5%A6%82%E4%BD%95%E5%86%99%E6%96%B0%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hexo-Sakura如何写新博客 1.创建文章 $ hexo new [layout] &amp;lt;title&amp;gt;//例$ hexo new page &amp;quot;我的页面&amp;quot;//布局有三种：post（文章）、draft（草稿）、page（页面）2.编辑文章样式 在博客根目录/source/_posts下找到生成的博客文件
根据自己的需要修改，一般添加photo的url tag keywords categories 即可，其他可在布局文件中默认设置，自定义布局过程程如下
在博客根目录/scaffolds/下有三个布局的文件
我们根据自己的需求更改
3.编辑文本内容 使用markdown格式编写内容，期间涉及代码块样式、插入图片等技巧可查看本站其他文章</description>
    </item>
    
    <item>
      <title>Leetcode-118. 杨辉三角</title>
      <link>/posts/leetcode-118.-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</link>
      <pubDate>Tue, 11 Aug 2020 20:14:04 +0000</pubDate>
      
      <guid>/posts/leetcode-118.-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</guid>
      <description>Leetcode-118. 杨辉三角 1.0题目描述 给定一个非负整数 *numRows，*生成杨辉三角的前 numRows 行。
在杨辉三角中，每个数是它左上方和右上方的数的和。
示例:
输入: 5输出:[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]2.0解题思路 和题目描述那个图的过程一样，比较简单
3.0代码 func generate(numRows int) [][]int {if(numRows &amp;lt;= 0) {return nil}first := []int{1}result := make([][]int, numRows)for i:=0; i&amp;lt;numRows; i++ {result[i] = make([]int, i+1)}result[0] = firstfor i:=1; i&amp;lt;numRows; i++ {next := make([]int, i+1)next[0], next[i] = 1, 1for j :=1; j&amp;lt;i; j++ {next[j] = result[i-1][j-1] + result[i-1][j]}result[i] = next}return result}4.</description>
    </item>
    
    <item>
      <title>LeetCode-26删除数组中重复项</title>
      <link>/posts/leetcode-26%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Tue, 11 Aug 2020 20:14:04 +0000</pubDate>
      
      <guid>/posts/leetcode-26%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>题目描述 给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
示例 1:
给定数组 nums = [1,1,2],
函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
你不需要考虑数组中超出新长度后面的元素。 示例 2:
给定 nums = [0,0,1,1,1,2,2,3,3,4],
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
你不需要考虑数组中超出新长度后面的元素。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
解题思路 双指针法：存放非重复元素的指针(0开始) 寻找下一个非重复元素的指针(1开始)
寻找指针：遍历数组找到 下一个不重复元素(和已存放的元素不相等)，找到后存入非重复指针
代码实现 func removeDuplicates(nums []int) int {if(len(nums) == 1) {return 1}//bef最大不重复项 cur当前遍历元素bef := 0for cur := 1; cur &amp;lt; len(nums); cur++ {if(nums[bef] !</description>
    </item>
    
    <item>
      <title>Hexo-Sakura如何博客迁移到不同电脑</title>
      <link>/posts/hexo-sakura%E5%A6%82%E4%BD%95%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E4%B8%8D%E5%90%8C%E7%94%B5%E8%84%91/</link>
      <pubDate>Tue, 11 Aug 2020 20:10:14 +0000</pubDate>
      
      <guid>/posts/hexo-sakura%E5%A6%82%E4%BD%95%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E4%B8%8D%E5%90%8C%E7%94%B5%E8%84%91/</guid>
      <description>Hexo-Sakura博客迁移前期准备 1.将所有的博客项目文件(可以在执行hexo clean 后，这样文件少一点)上传到GitHub的仓库
这里是上传到linxuesong / **linxuesong.github.io**的hexo分支
下面开始迁移：
步骤一：本地初始化hexo博客环境 详见hexo搭建个人博客教程
要求：hexo s后可以本地看到默认页面
步骤二：用我们上传的博客项目文件替换初始化的默认文件 1.下载上传的所有博客项目文件
2.替换默认文件
步骤三：启用需插件功能 下载不同功能所需对应的hexo插件
1.本地搜索功能
npm install hexo-generator-json-content --save2.启用自定义代码块背景
npm i -S hexo-prism-plugin如何选用hexo-prism-plugin的代码块样式主题，可以本站搜索
3.添加RSS订阅的网站
https://blog.csdn.net/cungudafa/article/details/104320396
4.添加豆瓣hexo-douban插件生成书单、电影等页面
npm install hexo-douban --save 然后在博客站点目录下的node_modules文件夹下找到hexo-douban/lib，文件夹下有三个js文件，分别为：books-generator.js 、games-generator.js 、movies-generator.js，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容：
/* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/ layout: [`douban`] 5.添加sitemap站点地图生成插件
用于谷歌、百度收录本网站
npm install hexo-generator-sitemap --save6.</description>
    </item>
    
    <item>
      <title>Hexo博客md文件插入图片（以Typora编辑器为例）</title>
      <link>/posts/hexo%E5%8D%9A%E5%AE%A2md%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%BB%A5typora%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BA%E4%BE%8B/</link>
      <pubDate>Tue, 28 Jul 2020 14:13:54 +0000</pubDate>
      
      <guid>/posts/hexo%E5%8D%9A%E5%AE%A2md%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%BB%A5typora%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BA%E4%BE%8B/</guid>
      <description>Typora插入Base64图片 在Typora中插入图片常用的处理方法是：
将本地的图片地址传入 将网络上的图片地址传入 这两种方式都存在一个问题：链接不可用时，图片就展示不出来了！
解决方法 方法一 首先将图片通过在线转码工具转换成base64的编码，并用以下格式嵌入即可，格式如下：
![image] (base64) 但是由于这base64编码往往都很长，很占篇幅，因此我们可以给图片编号，并将所有的图片base64编码放在文档的最后即可，格式如下： 在插入图片的地方使用：![image] [图片编号] 在文档最后使用：[图片编号]:base64编码 这样即可完成图片的永久插入！
———————————————— 版权声明：本文为CSDN博主「听雨眠_sun」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/baidu_31492511/java/article/details/90704123
方法二 图片素材按官方教程说法，可统一放置在source/images目录中，并以 ![](/images/image.jpg) 方式引用
或者在 _config.yml 打开 post_asset_folder 功能，将当前文章所用的图片放置到source目录下的文章同名资源目录下，以 ![](image.jpg) 方式引用
————————————————
作者：Wavky 链接：https://www.jianshu.com/p/925fa86ccc95 来源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</description>
    </item>
    
    <item>
      <title>Hexo-Sakura添加本站搜索功能</title>
      <link>/posts/hexo-sakura%E6%B7%BB%E5%8A%A0%E6%9C%AC%E7%AB%99%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 28 Jul 2020 14:12:50 +0000</pubDate>
      
      <guid>/posts/hexo-sakura%E6%B7%BB%E5%8A%A0%E6%9C%AC%E7%AB%99%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid>
      <description>hexo-sakura添加本站搜索功能 效果图如下： 构建步骤
1.安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令：
npm install hexo-generator-searchdb --save2.全局配置文件_config.yml，新增如下内容：
search: path: search.xml field: post format: html limit: 10000 3.hexo主题配置文件（\themes\next_config.yml），修改local_search的enable为true：
# Local search # Dependencies: https://github.com/flashlab/hexo-generator-search local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 </description>
    </item>
    
    <item>
      <title>Hexo-Sakura主题优化：jsDelivr &#43; Github 搭建免费CDN（生成自己资源的url）</title>
      <link>/posts/hexo-sakura%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96jsdelivr-github-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9cdn%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E8%B5%84%E6%BA%90%E7%9A%84url/</link>
      <pubDate>Tue, 28 Jul 2020 14:11:26 +0000</pubDate>
      
      <guid>/posts/hexo-sakura%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96jsdelivr-github-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9cdn%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E8%B5%84%E6%BA%90%E7%9A%84url/</guid>
      <description>主题优化：jsDelivr + Github 搭建免费CDN（生成自己资源的url）
使用效果：
以一个仓库存放我们网络资源文件，在写网页或者修改配置时可以使用我们自己的网上资源
如：https://cdn.jsdelivr.net/gh/linxuesong/cdn
创建方法
1.创建github存储库，记得要选public
2.发布仓库
发布成功后
3.
通过 jsDelivr 引用资源 格式：https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径 例如：https://cdn.jsdelivr.net/gh/heruo/CDN@1.1/blog_medias/avatar.png 在文件夹末尾以/结束，可以显示资源目录 例如：https://cdn.jsdelivr.net/gh/heruo/CDN@1.1/blog_medias/reward/</description>
    </item>
    
    <item>
      <title>Hexo-Theme-Sakura</title>
      <link>/posts/hexo-theme-sakura/</link>
      <pubDate>Wed, 12 Dec 2018 22:16:01 +0000</pubDate>
      
      <guid>/posts/hexo-theme-sakura/</guid>
      <description>hexo-theme-sakura主题 English document
基于WordPress主题Sakura修改成Hexo的主题。
demo预览
正在开发中&amp;hellip;&amp;hellip;
交流群 若你是使用者，加群QQ: 801511924
若你是创作者，加群QQ: 194472590
主题特性  首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）  赞赏作者 如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！
paypal | Alipay 支付宝 | WeChat Pay 微信支付
未完善的使用教程 那啥？老实说我目前也不是很有条理233333333~
1、主题下载安装 hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。
下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。
2、主题配置 博客根目录下的_config配置 站点
# Sitetitle:你的站点名subtitle:description:站点简介keywords:author:作者名language:zh-cntimezone:部署
deploy:type:gitrepo:github:你的github仓库地址# coding: 你的coding仓库地址branch:master备份 （使用hexo b发布备份到远程仓库）
backup:type:gitmessage:backup my blog of https://honjun.</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/leetcode-581.-%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/leetcode-581.-%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>title: Leetcode-581. 最短无序连续子数组 author: linxuesong avatar: &amp;lsquo;https://cdn.jsdelivr.net/gh/linxuesong/cdn/img/avatar.jpg&#39; authorLink: linxuesong.github.io authorAbout: 一个好奇的人 authorDesc: 一个好奇的人 categories:
  技术 comments: true tags:
 数组 LeetCode 简单 keywords: LeetCode photos: &amp;lsquo;https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(1).jpg.webp&#39; date: 2020-09-01 20:16:49 description:     581. 最短无序连续子数组
1.0题目描述 给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。
你找到的子数组应是最短的，请输出它的长度。
示例 1:
输入: [2, 6, 4, 8, 10, 9, 15]输出: 5解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。说明 :</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/posts/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/hello-world/</guid>
      <description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing</description>
    </item>
    
  </channel>
</rss>
